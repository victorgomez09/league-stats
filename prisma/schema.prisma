generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Custom fields
  tier             UserTier  @default(FREE)
  riotAccounts     RiotAccount[]
  playerAnalytics  PlayerAnalytics[]
  favoriteChampions FavoriteChampion[]
  
  accounts         Account[]
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Custom models
model RiotAccount {
  id           String   @id @default(cuid())
  userId       String
  puuid        String   @unique
  gameName     String
  tagLine      String
  summonerId   String?
  accountId    String?
  region       String
  profileIcon  Int?
  summonerLevel Int?
  lastSync     DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([puuid])
}

model PlayerAnalytics {
  id              String   @id @default(cuid())
  userId          String
  puuid           String
  analyzedAt      DateTime @default(now())
  
  // Analytics data
  avgKda          Float
  winRate         Float
  mostPlayedRole  String
  championPool    Json     // Array of champion stats
  strengths       Json     // Array of identified strengths
  weaknesses      Json     // Array of improvement areas
  recommendations Json     // Personalized tips
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([puuid])
}

model FavoriteChampion {
  id          String   @id @default(cuid())
  userId      String
  championId  String
  addedAt     DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, championId])
  @@index([userId])
}

// Cached match data for performance
model CachedMatch {
  id          String   @id @default(cuid())
  matchId     String   @unique
  puuid       String
  gameData    Json     // Full match data from Riot API
  cachedAt    DateTime @default(now())
  expiresAt   DateTime
  
  @@index([puuid])
  @@index([cachedAt])
}

enum UserTier {
  FREE
  BASIC
  PRO
}